name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish"
        required: false
        type: string
      release:
        description: "Release version"
        required: false
        type: string
        default: "1"

jobs:
  compile_and_release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Configure Git user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Version bump
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "Updating version in CMakeLists.txt to '${{ github.event.inputs.version }}'..."
            sed -i -E "s/(project\\([^)]*VERSION )[0-9]+\\.[0-9]+\\.[0-9]+/\\1${{ github.event.inputs.version }}/" CMakeLists.txt
            VERSION="${{ github.event.inputs.version }}"
          else
            echo "No version provided — running 'make increase_version'..."
            make increase_version
            VERSION=$(grep -oP '(?<=VERSION )\d+\.\d+\.\d+' CMakeLists.txt)
          fi

          RELEASE="${{ github.event.inputs.release }}"
          TAG="${VERSION}-${RELEASE}"

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV

          git add .
          git commit -m "[ci skip] Version bump to '${VERSION}'"

      - name: Validate version
        run: |
          if git rev-parse "refs/tags/${VERSION}-${RELEASE}" >/dev/null 2>&1; then
            echo "❌ Tag '${VERSION}-${RELEASE}' already exists. Please bump the version."
            exit 1
          else
            echo "✅ Tag '${VERSION}-${RELEASE}' does not exist. Continuing..."
          fi

      - name: Process release
        run: |
          make release

      - name: Publish to AUR
        env:
          AUR_SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
        run: |
          echo "Setting SSH key for AUR..."
          mkdir -p ~/.ssh
          echo "$AUR_SSH_PRIVATE_KEY" > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          echo -e "Host aur.archlinux.org\n\tIdentityFile ~/.ssh/aur\n\tUser aur\n\tStrictHostKeyChecking no" >> ~/.ssh/config

          echo "Cloning AUR repository..."
          git clone ssh://aur@aur.archlinux.org/rog-perf-tuner.git aur_repo
          cd aur_repo

          echo "Configuring Git identity..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "Copying files..."
          cp ../dist/PKGBUILD .
          cp ../dist/.SRCINFO .
          cp ../dist/rog-perf-tuner.install .

          echo "Committing changes..."
          git add PKGBUILD .SRCINFO rog-perf-tuner.install
          git diff-index --quiet HEAD || git commit -m "Release ${GITHUB_REF_NAME}"
          git push

      - name: Create tag
        run: |
          git tag "${{ env.VERSION }}-${{ env.RELEASE }}"
          git push origin main
          git push origin main:develop --force

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          files: |
            dist/PKGBUILD
            dist/rog-perf-tuner.install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
